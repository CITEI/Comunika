@startuml
autoactivate on

actor Client
boundary API
control UserController
database User
database Box
control GameController
database Stage

Client -> API: evaluate(userId, answers)

    API -> UserController: evaluate(userId, answers)

        UserController -> User: getUser()
        return user

        UserController -> Box: getBox()
        return box

        UserController -> Box: calc_grade(answers)
        return grade

        alt #lightgreen grade >= 0.7

            UserController -> GameController: getNext(stage)

                GameController -> GameController: getNext(stage)
                return stage

                GameController -> Stage: createBox()
                return newBox

            return newBox

        else #pink grade < 0.7

            UserController -> GameController: getAlternate(stage)

                GameController -> User: getStage()
                return stage

                GameController -> User: isAlternate()
                return alternateStatus

                alt alternateStatus == false

                    GameController -> Stage : getAlternate()
                    return newBox

                else alternateStatus == true

                    GameController -> Stage : getAlternateFromSampling()
                    return newBox

                end

                GameController -> User: setAlternate(true)
                return

            return newBox

        end

        UserController -> Box: updateAnswers(answers)
        return

        UserController -> User: addToHistory(box)
        return

        UserController -> User: updateProgress(newBox, stage, module)
        return

    return newBox

return newBox

@enduml